{"version":3,"file":"static/chunks/pages/device-info-12ddae4ecc015a45.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.66.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.base.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.66.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.styles.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.66.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.66.2_12a6012245369fd5be825566be975ff0/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.types.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.8.2_b094b78811fc8d2f00a90f13d0251fb6/node_modules/@fluentui/utilities/lib/DelayedRender.js","webpack://_N_E/?1acf","webpack://_N_E/./src/pages/device-info.tsx"],"sourcesContent":["var _a;\nimport { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nvar ICON_MAP = (_a = {},\n    _a[MessageBarType.info] = 'Info',\n    _a[MessageBarType.warning] = 'Info',\n    _a[MessageBarType.error] = 'ErrorBadge',\n    _a[MessageBarType.blocked] = 'Blocked2',\n    _a[MessageBarType.severeWarning] = 'Warning',\n    _a[MessageBarType.success] = 'Completed',\n    _a);\nvar COMPONENT_NAME = 'MessageBar';\nvar getClassNames = classNamesFunction();\nvar getAnnouncementPriority = function (messageBarType) {\n    switch (messageBarType) {\n        case MessageBarType.blocked:\n        case MessageBarType.error:\n        case MessageBarType.severeWarning:\n            return 'assertive';\n    }\n    return 'polite';\n};\nvar getRole = function (messageBarType) {\n    switch (messageBarType) {\n        case MessageBarType.blocked:\n        case MessageBarType.error:\n        case MessageBarType.severeWarning:\n            return 'alert';\n    }\n    return 'status';\n};\nexport var MessageBarBase = React.forwardRef(function (props, ref) {\n    var _a = useBoolean(false), expandSingleLine = _a[0], toggleExpandSingleLine = _a[1].toggle;\n    var labelId = useId('MessageBar');\n    var actions = props.actions, className = props.className, children = props.children, \n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel = props.overflowButtonAriaLabel, dismissIconProps = props.dismissIconProps, styles = props.styles, theme = props.theme, _b = props.messageBarType, messageBarType = _b === void 0 ? MessageBarType.info : _b, _c = props.onDismiss, onDismiss = _c === void 0 ? undefined : _c, _d = props.isMultiline, isMultiline = _d === void 0 ? true : _d, truncated = props.truncated, dismissButtonAriaLabel = props.dismissButtonAriaLabel, messageBarIconProps = props.messageBarIconProps, role = props.role, _e = props.delayedRender, delayedRender = _e === void 0 ? true : _e, expandButtonProps = props.expandButtonProps;\n    var nativeProps = getNativeProps(props, htmlElementProperties, [\n        'className',\n        'role',\n    ]);\n    var classNames = getClassNames(styles, {\n        theme: theme,\n        messageBarType: messageBarType || MessageBarType.info,\n        onDismiss: onDismiss !== undefined,\n        actions: actions !== undefined,\n        truncated: truncated,\n        isMultiline: isMultiline,\n        expandSingleLine: expandSingleLine,\n        className: className,\n    });\n    var expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n    var regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n    var actionsDiv = actions ? React.createElement(\"div\", { className: classNames.actions }, actions) : null;\n    var dismissButton = onDismiss ? (React.createElement(IconButton, { disabled: false, className: classNames.dismissal, onClick: onDismiss, iconProps: dismissIconProps ? dismissIconProps : { iconName: 'Clear' }, title: dismissButtonAriaLabel, ariaLabel: dismissButtonAriaLabel })) : null;\n    return (React.createElement(\"div\", __assign({ ref: ref, className: classNames.root }, regionProps),\n        React.createElement(\"div\", { className: classNames.content },\n            React.createElement(\"div\", { className: classNames.iconContainer, \"aria-hidden\": true }, messageBarIconProps ? (React.createElement(Icon, __assign({}, messageBarIconProps, { className: css(classNames.icon, messageBarIconProps.className) }))) : (React.createElement(Icon, { iconName: ICON_MAP[messageBarType], className: classNames.icon }))),\n            React.createElement(\"div\", { className: classNames.text, id: labelId, role: role || getRole(messageBarType), \"aria-live\": getAnnouncementPriority(messageBarType) },\n                React.createElement(\"span\", __assign({ className: classNames.innerText }, nativeProps), delayedRender ? (React.createElement(DelayedRender, null,\n                    React.createElement(\"span\", null, children))) : (\n                // this span is probably not necessary, but preserving it for now in case anyone\n                // has styling that expects it to be present\n                React.createElement(\"span\", null, children)))),\n            /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (React.createElement(\"div\", { className: classNames.expandSingleLine },\n                React.createElement(IconButton, __assign({ disabled: false, className: classNames.expand, onClick: toggleExpandSingleLine, iconProps: expandIconProps, ariaLabel: overflowButtonAriaLabel, \"aria-expanded\": expandSingleLine }, expandButtonProps)))),\n            !isMultiline && actionsDiv,\n            /* singleline dismiss */ !isMultiline && dismissButton && (React.createElement(\"div\", { className: classNames.dismissSingleLine }, dismissButton)),\n            isMultiline && dismissButton),\n        isMultiline && actionsDiv));\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n//# sourceMappingURL=MessageBar.base.js.map","var _a, _b, _c;\nimport { __assign } from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getGlobalClassNames, getFocusStyle, IconFontSizes, getHighContrastNoAdjustStyle, } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n    root: 'ms-MessageBar',\n    error: 'ms-MessageBar--error',\n    blocked: 'ms-MessageBar--blocked',\n    severeWarning: 'ms-MessageBar--severeWarning',\n    success: 'ms-MessageBar--success',\n    warning: 'ms-MessageBar--warning',\n    multiline: 'ms-MessageBar-multiline',\n    singleline: 'ms-MessageBar-singleline',\n    dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n    expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n    content: 'ms-MessageBar-content',\n    iconContainer: 'ms-MessageBar-icon',\n    text: 'ms-MessageBar-text',\n    innerText: 'ms-MessageBar-innerText',\n    dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n    expandSingleLine: 'ms-MessageBar-expandSingleLine',\n    dismissal: 'ms-MessageBar-dismissal',\n    expand: 'ms-MessageBar-expand',\n    actions: 'ms-MessageBar-actions',\n    actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\nvar backgroundColor = (_a = {},\n    _a[MessageBarType.error] = 'errorBackground',\n    _a[MessageBarType.blocked] = 'errorBackground',\n    _a[MessageBarType.success] = 'successBackground',\n    _a[MessageBarType.warning] = 'warningBackground',\n    _a[MessageBarType.severeWarning] = 'severeWarningBackground',\n    _a[MessageBarType.info] = 'infoBackground',\n    _a);\nvar highContrastBackgroundColor = (_b = {},\n    _b[MessageBarType.error] = 'rgba(255, 0, 0, 0.3)',\n    _b[MessageBarType.blocked] = 'rgba(255, 0, 0, 0.3)',\n    _b[MessageBarType.success] = 'rgba(48, 241, 73, 0.3)',\n    _b[MessageBarType.warning] = 'rgba(255, 254, 57, 0.3)',\n    _b[MessageBarType.severeWarning] = 'rgba(255, 0, 0, 0.3)',\n    _b[MessageBarType.info] = 'Window',\n    _b);\nvar iconColor = (_c = {},\n    _c[MessageBarType.error] = 'errorIcon',\n    _c[MessageBarType.blocked] = 'errorIcon',\n    _c[MessageBarType.success] = 'successIcon',\n    _c[MessageBarType.warning] = 'warningIcon',\n    _c[MessageBarType.severeWarning] = 'severeWarningIcon',\n    _c[MessageBarType.info] = 'infoIcon',\n    _c);\nexport var getStyles = function (props) {\n    var _a, _b, _c, _d, _e;\n    var theme = props.theme, className = props.className, onDismiss = props.onDismiss, truncated = props.truncated, isMultiline = props.isMultiline, expandSingleLine = props.expandSingleLine, _f = props.messageBarType, messageBarType = _f === void 0 ? MessageBarType.info : _f;\n    var semanticColors = theme.semanticColors, fonts = theme.fonts;\n    var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n    var classNames = getGlobalClassNames(GlobalClassNames, theme);\n    var dismissalAndExpandIconStyle = {\n        fontSize: IconFontSizes.xSmall,\n        height: 10,\n        lineHeight: '10px',\n        color: semanticColors.messageText,\n        selectors: (_a = {},\n            _a[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), { color: 'WindowText' }),\n            _a),\n    };\n    var dismissalAndExpandStyle = [\n        getFocusStyle(theme, {\n            inset: 1,\n            highContrastStyle: {\n                outlineOffset: '-6px',\n                outline: '1px solid Highlight',\n            },\n            borderColor: 'transparent',\n        }),\n        {\n            flexShrink: 0,\n            width: 32,\n            height: 32,\n            padding: '8px 12px',\n            selectors: {\n                '& .ms-Button-icon': dismissalAndExpandIconStyle,\n                ':hover': {\n                    backgroundColor: 'transparent',\n                },\n                ':active': {\n                    backgroundColor: 'transparent',\n                },\n            },\n        },\n    ];\n    return {\n        root: [\n            classNames.root,\n            fonts.medium,\n            messageBarType === MessageBarType.error && classNames.error,\n            messageBarType === MessageBarType.blocked && classNames.blocked,\n            messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n            messageBarType === MessageBarType.success && classNames.success,\n            messageBarType === MessageBarType.warning && classNames.warning,\n            isMultiline ? classNames.multiline : classNames.singleline,\n            !isMultiline && onDismiss && classNames.dismissalSingleLine,\n            !isMultiline && truncated && classNames.expandingSingleLine,\n            {\n                background: semanticColors[backgroundColor[messageBarType]],\n                color: semanticColors.messageText,\n                minHeight: 32,\n                width: '100%',\n                display: 'flex',\n                wordBreak: 'break-word',\n                selectors: (_b = {\n                        '.ms-Link': {\n                            color: semanticColors.messageLink,\n                            selectors: {\n                                ':hover': {\n                                    color: semanticColors.messageLinkHovered,\n                                },\n                            },\n                        }\n                    },\n                    _b[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), { background: highContrastBackgroundColor[messageBarType], border: '1px solid WindowText', color: 'WindowText' }),\n                    _b),\n            },\n            isMultiline && {\n                flexDirection: 'column',\n            },\n            className,\n        ],\n        content: [\n            classNames.content,\n            {\n                display: 'flex',\n                width: '100%',\n                lineHeight: 'normal',\n            },\n        ],\n        iconContainer: [\n            classNames.iconContainer,\n            {\n                fontSize: IconFontSizes.medium,\n                minWidth: 16,\n                minHeight: 16,\n                display: 'flex',\n                flexShrink: 0,\n                margin: '8px 0 8px 12px',\n            },\n        ],\n        icon: {\n            color: semanticColors[iconColor[messageBarType]],\n            selectors: (_c = {},\n                _c[HighContrastSelector] = __assign(__assign({}, getHighContrastNoAdjustStyle()), { color: 'WindowText' }),\n                _c),\n        },\n        text: [\n            classNames.text,\n            __assign(__assign({ minWidth: 0, display: 'flex', flexGrow: 1, margin: 8 }, fonts.small), { selectors: (_d = {},\n                    _d[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()),\n                    _d) }),\n            !onDismiss && {\n                marginRight: 12,\n            },\n        ],\n        innerText: [\n            classNames.innerText,\n            {\n                lineHeight: 16,\n                selectors: {\n                    '& span a:last-child': {\n                        paddingLeft: 4,\n                    },\n                },\n            },\n            truncated && {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n            },\n            !isMultiline && {\n                // In high contrast this causes the top and bottom of links' focus outline to be clipped\n                // (not sure of a good way around that while still maintaining text clipping)\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n            },\n            !isMultiline &&\n                !truncated && {\n                selectors: (_e = {},\n                    _e[SmallScreenSelector] = {\n                        overflow: 'visible',\n                        whiteSpace: 'pre-wrap',\n                    },\n                    _e),\n            },\n            expandSingleLine && {\n                overflow: 'visible',\n                whiteSpace: 'pre-wrap',\n            },\n        ],\n        dismissSingleLine: classNames.dismissSingleLine,\n        expandSingleLine: classNames.expandSingleLine,\n        dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n        expand: [classNames.expand, dismissalAndExpandStyle],\n        actions: [\n            isMultiline ? classNames.actions : classNames.actionsSingleline,\n            {\n                display: 'flex',\n                flexGrow: 0,\n                flexShrink: 0,\n                flexBasis: 'auto',\n                flexDirection: 'row-reverse',\n                alignItems: 'center',\n                margin: '0 12px 0 8px',\n                selectors: {\n                    '& button:nth-child(n+2)': {\n                        marginLeft: 8,\n                    },\n                },\n            },\n            isMultiline && {\n                marginBottom: 8,\n            },\n            onDismiss &&\n                !isMultiline && {\n                marginRight: 0,\n            },\n        ],\n    };\n};\n//# sourceMappingURL=MessageBar.styles.js.map","import { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nexport var MessageBar = styled(MessageBarBase, getStyles, undefined, {\n    scope: 'MessageBar',\n});\n//# sourceMappingURL=MessageBar.js.map","/**\n * {@docCategory MessageBar}\n */\nexport var MessageBarType;\n(function (MessageBarType) {\n    /** Info styled MessageBar */\n    MessageBarType[MessageBarType[\"info\"] = 0] = \"info\";\n    /** Error styled MessageBar */\n    MessageBarType[MessageBarType[\"error\"] = 1] = \"error\";\n    /** Blocked styled MessageBar */\n    MessageBarType[MessageBarType[\"blocked\"] = 2] = \"blocked\";\n    /** SevereWarning styled MessageBar */\n    MessageBarType[MessageBarType[\"severeWarning\"] = 3] = \"severeWarning\";\n    /** Success styled MessageBar */\n    MessageBarType[MessageBarType[\"success\"] = 4] = \"success\";\n    /** Warning styled MessageBar */\n    MessageBarType[MessageBarType[\"warning\"] = 5] = \"warning\";\n})(MessageBarType || (MessageBarType = {}));\n//# sourceMappingURL=MessageBar.types.js.map","import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nvar DelayedRender = /** @class */ (function (_super) {\n    __extends(DelayedRender, _super);\n    function DelayedRender(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n            isRendered: getWindow() === undefined,\n        };\n        return _this;\n    }\n    DelayedRender.prototype.componentDidMount = function () {\n        var _this = this;\n        var delay = this.props.delay;\n        this._timeoutId = window.setTimeout(function () {\n            _this.setState({\n                isRendered: true,\n            });\n        }, delay);\n    };\n    DelayedRender.prototype.componentWillUnmount = function () {\n        if (this._timeoutId) {\n            clearTimeout(this._timeoutId);\n        }\n    };\n    DelayedRender.prototype.render = function () {\n        return this.state.isRendered ? React.Children.only(this.props.children) : null;\n    };\n    DelayedRender.defaultProps = {\n        delay: 0,\n    };\n    return DelayedRender;\n}(React.Component));\nexport { DelayedRender };\n//# sourceMappingURL=DelayedRender.js.map","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/device-info\",\n      function () {\n        return require(\"private-next-pages/device-info.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/device-info\"])\n      });\n    }\n  ","import { Icon, MessageBar, Separator, Stack, TooltipHost } from \"@fluentui/react\";\nimport { AdbFeatures } from \"@yume-chan/adb\";\nimport { observer } from 'mobx-react-lite';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport React from \"react\";\nimport { ExternalLink } from \"../components\";\nimport { globalState } from '../state';\nimport { Icons, RouteStackProps } from \"../utils\";\n\nconst KNOWN_FEATURES: Record<string, string> = {\n    [AdbFeatures.ShellV2]: `\"shell\" command now supports separating child process's stdout and stderr, and returning exit code`,\n    // 'cmd': '',\n    [AdbFeatures.StatV2]: '\"sync\" command now supports \"STA2\" (returns more information of a file than old \"STAT\") and \"LST2\" (returns information of a directory) sub command',\n    [AdbFeatures.ListV2]: '\"sync\" command now supports \"LST2\" sub command which returns more information when listing a directory than old \"LIST\"',\n    [AdbFeatures.FixedPushMkdir]: 'Android 9 (P) introduced a bug that pushing files to a non-existing directory would fail. This feature indicates it\\'s fixed (Android 10)',\n    // 'apex': '',\n    // 'abb': '',\n    // 'fixed_push_symlink_timestamp': '',\n    'abb_exec': 'Support \"exec\" command which can stream stdin into child process',\n    // 'remount_shell': '',\n    // 'track_app': '',\n    // 'sendrecv_v2': '',\n    // 'sendrecv_v2_brotli': '',\n    // 'sendrecv_v2_lz4': '',\n    // 'sendrecv_v2_zstd': '',\n    // 'sendrecv_v2_dry_run_send': '',\n};\n\nconst DeviceInfo: NextPage = () => {\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Device Info - Android Web Toolbox</title>\n            </Head>\n\n            <MessageBar>\n                <span>ADB protocol version decides the packet format between client and server. By now it has 2 versions:</span>\n                <br />\n\n                <code>01000000</code>\n                <span> used in Android versions until 8 (Oreo)</span>\n                <br />\n\n                <code>01000001</code>\n                <span> used in Android versions from 9 (Pie)</span>\n                <br />\n\n                <span>For more information, you can check</span>\n                <ExternalLink href=\"https://chensi.moe/blog/2020/09/30/webadb-part2-connection/#version\">my blog post</ExternalLink>\n            </MessageBar>\n            <span>\n                <span>Protocol Version: </span>\n                <code>{globalState.device?.protocolVersion?.toString(16).padStart(8, '0')}</code>\n            </span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.name</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Product Name: {globalState.device?.product}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.model</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Model Name: {globalState.device?.model}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.device</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Device Name: {globalState.device?.device}</span>\n            <Separator />\n\n            <MessageBar>\n                <span>Feature list decides how each individual commands should behavior.</span>\n                <br />\n\n                <span>For example, it may indicate the availability of a new command, </span>\n                <span>{`or a workaround for an old bug is not required because it's already been fixed.`}</span>\n                <br />\n            </MessageBar>\n            <span>\n                <span>Features: </span>\n                {globalState.device?.features?.map((feature, index) => (\n                    <span key={feature}>\n                        {index !== 0 && (<span>, </span>)}\n                        <span>{feature}</span>\n                        {KNOWN_FEATURES[feature] && (\n                            <TooltipHost content={<span>{KNOWN_FEATURES[feature]}</span>}>\n                                <Icon style={{ marginLeft: 4 }} iconName={Icons.Info} />\n                            </TooltipHost>\n                        )}\n                    </span>\n                ))}\n            </span>\n        </Stack>\n    );\n};\n\nexport default observer(DeviceInfo);\n"],"names":["_a","ICON_MAP","getClassNames","classNamesFunction","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","props","ref","useBoolean","expandSingleLine","toggleExpandSingleLine","toggle","labelId","useId","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","_b","_c","onDismiss","undefined","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","delayedRender","expandButtonProps","nativeProps","classNames","expandIconProps","iconName","regionProps","actionsDiv","dismissButton","IconButton","disabled","dismissal","onClick","iconProps","title","ariaLabel","root","content","iconContainer","Icon","css","icon","text","id","innerText","DelayedRender","expand","dismissSingleLine","displayName","GlobalClassNames","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","highContrastBackgroundColor","iconColor","MessageBar","styled","_f","semanticColors","fonts","SmallScreenSelector","dismissalAndExpandIconStyle","fontSize","height","lineHeight","color","messageText","selectors","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","flexBasis","alignItems","marginLeft","marginBottom","scope","MessageBarType","_super","_this","call","this","state","isRendered","prototype","componentDidMount","delay","_timeoutId","window","setTimeout","setState","componentWillUnmount","clearTimeout","render","defaultProps","__NEXT_P","push","KNOWN_FEATURES","AdbFeatures","observer","globalState","Stack","RouteStackProps","Head","span","br","code","ExternalLink","href","protocolVersion","toString","padStart","Separator","product","model","device","features","map","feature","index","TooltipHost","style","Icons"],"sourceRoot":""}