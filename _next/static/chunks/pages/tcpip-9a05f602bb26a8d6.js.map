{"version":3,"file":"static/chunks/pages/tcpip-9a05f602bb26a8d6.js","mappings":"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","sources":["webpack://_N_E/?5380","webpack://_N_E/./src/pages/tcpip.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/tcpip\",\n      function () {\n        return require(\"private-next-pages/tcpip.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/tcpip\"])\n      });\n    }\n  ","// cspell: ignore addrs\n\nimport { ICommandBarItemProps, MessageBar, Stack, StackItem, Text, TextField, Toggle } from \"@fluentui/react\";\nimport { autorun, makeAutoObservable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { useCallback, useEffect } from \"react\";\nimport { CommandBar, ExternalLink } from \"../components\";\nimport { globalState } from \"../state\";\nimport { asyncEffect, Icons, RouteStackProps } from \"../utils\";\n\nclass TcpIpState {\n    initial = true;\n    visible = false;\n    serviceListenAddresses: string[] | undefined = undefined;\n    servicePortEnabled = false;\n    servicePort: string = '';\n    persistPortEnabled = false;\n    persistPort: string | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            queryInfo: false,\n            applyServicePort: false,\n        });\n\n\n        autorun(() => {\n            if (globalState.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.queryInfo();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    get commandBarItems(): ICommandBarItemProps[] {\n        return [\n            {\n                key: 'refresh',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.ArrowClockwise },\n                text: 'Refresh',\n                onClick: this.queryInfo as VoidFunction,\n            },\n            {\n                key: 'apply',\n                disabled: !globalState.device,\n                iconProps: { iconName: Icons.Save },\n                text: 'Apply',\n                onClick: this.applyServicePort,\n            }\n        ];\n    }\n\n    queryInfo = asyncEffect(async (signal) => {\n        if (!globalState.device) {\n            runInAction(() => {\n                this.serviceListenAddresses = undefined;\n                this.servicePortEnabled = false;\n                this.servicePort = '';\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            });\n            return;\n        }\n\n        const serviceListenAddresses = await globalState.device.getProp('service.adb.listen_addrs');\n        const servicePort = await globalState.device.getProp('service.adb.tcp.port');\n        const persistPort = await globalState.device.getProp('persist.adb.tcp.port');\n\n        if (signal.aborted) {\n            return;\n        }\n\n        runInAction(() => {\n            this.serviceListenAddresses = serviceListenAddresses !== '' ? serviceListenAddresses.split(',') : undefined;\n\n            if (servicePort) {\n                this.servicePortEnabled = !serviceListenAddresses && servicePort !== '0';\n                this.servicePort = servicePort;\n            } else {\n                this.servicePortEnabled = false;\n                this.servicePort = '5555';\n            }\n\n            if (persistPort) {\n                this.persistPortEnabled = !serviceListenAddresses && !servicePort;\n                this.persistPort = persistPort;\n            } else {\n                this.persistPortEnabled = false;\n                this.persistPort = undefined;\n            }\n        });\n    });\n\n    applyServicePort = async () => {\n        if (!globalState.device) {\n            return;\n        }\n\n        if (state.servicePortEnabled) {\n            await globalState.device.tcpip.setPort(Number.parseInt(state.servicePort, 10));\n        } else {\n            await globalState.device.tcpip.disable();\n        }\n    };\n}\n\nconst state = new TcpIpState();\n\nconst TcpIp: NextPage = () => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    });\n\n    const handleServicePortEnabledChange = useCallback((e, value?: boolean) => {\n        runInAction(() => { state.servicePortEnabled = !!value; });\n    }, []);\n\n    const handleServicePortChange = useCallback((e, value?: string) => {\n        if (value === undefined) {\n            return;\n        }\n        runInAction(() => state.servicePort = value);\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>ADB over WiFi - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBarItems} />\n\n            <StackItem>\n                <MessageBar>\n                    <Text>\n                        For WebADB to wirelessly connect to your device,\n                        <ExternalLink href=\"https://github.com/yume-chan/ya-webadb/discussions/245#discussioncomment-384030\" spaceBefore spaceAfter>extra software</ExternalLink>\n                        is required.\n                    </Text>\n                </MessageBar>\n            </StackItem>\n            <StackItem>\n                <MessageBar >\n                    <Text>Your device will disconnect after changing ADB over WiFi config.</Text>\n                </MessageBar>\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.listen_addrs\"\n                    disabled\n                    checked={!!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.serviceListenAddresses?.map((address) => (\n                    <TextField\n                        key={address}\n                        disabled\n                        value={address}\n                        styles={{ root: { width: 300 } }}\n                    />\n                ))}\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"service.adb.tcp.port\"\n                    checked={state.servicePortEnabled}\n                    disabled={!globalState.device || !!state.serviceListenAddresses}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                    onChange={handleServicePortEnabledChange}\n                />\n                <TextField\n                    disabled={!globalState.device || !!state.serviceListenAddresses}\n                    value={state.servicePort}\n                    styles={{ root: { width: 300 } }}\n                    onChange={handleServicePortChange}\n                />\n            </StackItem>\n\n            <StackItem>\n                <Toggle\n                    inlineLabel\n                    label=\"persist.adb.tcp.port\"\n                    disabled\n                    checked={state.persistPortEnabled}\n                    onText=\"Enabled\"\n                    offText=\"Disabled\"\n                />\n                {state.persistPort && (\n                    <TextField\n                        disabled\n                        value={state.persistPort}\n                        styles={{ root: { width: 300 } }}\n                    />\n                )}\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(TcpIp);\n"],"names":["window","__NEXT_P","push","TcpIpState","initial","visible","serviceListenAddresses","undefined","servicePortEnabled","servicePort","persistPortEnabled","persistPort","queryInfo","asyncEffect","signal","globalState","runInAction","aborted","split","applyServicePort","state","Number","parseInt","makeAutoObservable","this","autorun","commandBarItems","key","disabled","iconProps","iconName","Icons","text","onClick","observer","useEffect","handleServicePortEnabledChange","useCallback","e","value","handleServicePortChange","Stack","RouteStackProps","Head","title","CommandBar","items","StackItem","MessageBar","Text","ExternalLink","href","spaceBefore","spaceAfter","Toggle","inlineLabel","label","checked","onText","offText","map","address","TextField","styles","root","width","onChange"],"sourceRoot":""}